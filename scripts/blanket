#!/bin/bash

# Copyright Â© 2018 Engine Yard, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


append() {
  local original="${1}"
  local addition="${2}"
  local output=""

  if [ -n "${original}" ]
  then
    output="${original},${addition}"
  else
    output="${addition}"
  fi

  echo -n "${output}"
}

coverpkg() {
  local output=""

  if [ -d ./cmd ]
  then
    output=$(append "${output}" "./cmd/...")
  fi

  if [ -d ./pkg ]
  then
    output=$(append "${output}" "./pkg/...")
  fi

  if [ -z "${output}" ]
  then
    output="./..."
  fi

  echo -n "${output}"
}

generate() {
  local scope="${1}"
  local unit=""
  local integration=""

  case "${scope}" in
    "integration" | "features" | "outside" )
      echo "INTEGRATION TESTS ONLY"
      integration="1"
    ;;

    "unit" | "inside" )
      echo "UNIT TESTS ONLY"
      unit="1"
    ;;

    * )
      echo "ALL TESTS"
      unit="1"
      integration="1"
    ;;

  esac

  INTEGRATION="${integration}" UNIT="${unit}" go test -coverprofile=coverage.out -count=1 -v -coverpkg=$(coverpkg) $(go list ./... | grep -v /vendor/)
}

total() {
  echo
  echo -n "TOTAL TEST COVERAGE: "
  go tool cover -func=coverage.out | grep 'total:' | awk '{print $NF}'
}

display() {
  local via="${1}"

  go tool cover -${via}=coverage.out
}

view() {
  local via="${1}"
  local base="go tool cover"
  local target="=coverage.out"

  case "${via}" in
    "browser" | "html" )
      display html
      ;;

    "terminal" | "func" )
      echo
      display func
      ;;

    * )
      return 0
      ;;
  esac
}

generate ${2} && view ${1} && total
